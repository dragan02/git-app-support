From 51273d49f305600d6b598205468c0704dffa38cb Mon Sep 17 00:00:00 2001
From: Dragan Bozinovic <bozinovicdragan96@gmail.com>
Date: Sun, 30 May 2021 22:34:06 +0200
Subject: [PATCH] Adder support for various interfaces: PL061 GPIO controller,
 I2C slave and memory mapped component

Signed-off-by: Dragan Bozinovic <bozinovicdragan96@gmail.com>
---
 arch/arm/boot/dts/vexpress-v2m.dtsi |  27 ++
 drivers/char/Kconfig                |   7 +
 drivers/char/Makefile               |   2 +
 drivers/char/custom_mms.c           | 416 ++++++++++++++++++++++++++++
 4 files changed, 452 insertions(+)
 create mode 100644 drivers/char/custom_mms.c

diff --git a/arch/arm/boot/dts/vexpress-v2m.dtsi b/arch/arm/boot/dts/vexpress-v2m.dtsi
index 2ac41ed3a57c..f257fefe619a 100644
--- a/arch/arm/boot/dts/vexpress-v2m.dtsi
+++ b/arch/arm/boot/dts/vexpress-v2m.dtsi
@@ -124,6 +124,20 @@ pcie-switch@60 {
 						reg = <0x60>;
 					};
 				};
+                
+				/* PL061 GPIO */
+				gpio0: pl061@3000 {
+				    compatible = "arm,pl061", "arm,primecell";
+				    reg = <0x03000 0x1000>;
+				    interrupts = <26>;
+				    gpio-controller;
+				    #gpio-cells = <2>;
+				    gpio-line-names = "IN0", "IN1", "IN2", "IN3", "OUT0", "OUT1", "OUT2", "OUT3";
+				    interrupt-controller;
+				    #interrupt-cells = <2>;
+				    clocks = <&smbclk>;
+				    clock-names = "apb_pclk";
+				};
 
 				aaci@4000 {
 					compatible = "arm,pl041", "arm,primecell";
@@ -161,6 +175,13 @@ kmi@7000 {
 					clock-names = "KMIREFCLK", "apb_pclk";
 				};
 
+				custom_i2c: i2c@8000 {
+					compatible = "arm,versatile-i2c";
+					reg = <0x08000 0x1000>;
+					#address-cells = <1>;
+					#size-cells = <0>;
+				};
+
 				v2m_serial0: uart@9000 {
 					compatible = "arm,pl011", "arm,primecell";
 					reg = <0x09000 0x1000>;
@@ -193,6 +214,12 @@ v2m_serial3: uart@c000 {
 					clock-names = "uartclk", "apb_pclk";
 				};
 
+				custom_mms: mms@d000 {
+					compatible = "customdb,mms";
+					reg = <0x0d000 0x1000>;
+					interrupts = <28>;
+				};
+
 				wdt@f000 {
 					compatible = "arm,sp805", "arm,primecell";
 					reg = <0x0f000 0x1000>;
diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index d229a2d0c017..74b5d295c8a5 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -73,6 +73,13 @@ config LP_CONSOLE
 
 	  If unsure, say N.
 
+config CUSTOM_MMS
+        tristate "Custom MM sensor device driver"
+        depends on ARCH_VEXPRESS
+        default y
+        help
+                This is custom MM sensor device driver.
+
 config PPDEV
 	tristate "Support for user-space parallel port device drivers"
 	depends on PARPORT
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index ffce287ef415..438029dda363 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -47,3 +47,5 @@ obj-$(CONFIG_PS3_FLASH)		+= ps3flash.o
 obj-$(CONFIG_XILLYBUS)		+= xillybus/
 obj-$(CONFIG_POWERNV_OP_PANEL)	+= powernv-op-panel.o
 obj-$(CONFIG_ADI)		+= adi.o
+
+obj-$(CONFIG_CUSTOM_MMS) 	+= custom_mms.o
diff --git a/drivers/char/custom_mms.c b/drivers/char/custom_mms.c
new file mode 100644
index 000000000000..b1ac51ef71c8
--- /dev/null
+++ b/drivers/char/custom_mms.c
@@ -0,0 +1,416 @@
+/**
+ * @file custom_mms.c
+ * @brief Driver for custom memory mapped sensor component
+ *
+ * File represents custom memory mapped sensor component driver
+ * which enables character device and sysfs attribute support
+ * for the sensor.
+ *
+ * @date 2021
+ * @author Dragan Bozinovic (bozinovicdragan96@gmail.com)
+ *
+ * @version [1.0 @ 05/2021] Initial version
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/interrupt.h>
+#include <linux/uaccess.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/poll.h>
+
+/* Device and driver name */
+#define DEVICE_FILE_NAME	"custom_mms"
+#define DRIVER_NAME		"custom_mmsdrv"
+
+/* Custom MMS component registers */
+#define CUSTOM_MMS_CTRL_OFFSET      (0x00)
+#define CUSTOM_MMS_STATUS_OFFSET    (0x04)
+#define CUSTOM_MMS_DATA_OFFSET      (0x08)
+
+/**
+* Bits defined in qemu/hw/misc/custom_mmsens.c 
+*/
+/* Control bits */
+#define CTRL_EN_MASK     (0x00000001)
+#define CTRL_IEN_MASK    (0x00000002)
+
+/* Status bit */
+#define STATUS_IFG_MASK  (0x00000002)
+
+/* Data bit */
+#define DATA_SAMPLE_MASK        (0x000000FF)
+
+/** 
+ * * struct custom_mms - Custom MM sensor private data structure
+ * @base_addr: base address of the device
+ * @irq:       interrupt for the device
+ * @dev:       struct device pointer
+ * @cdev:      struct cdev
+ * @devt:      dev_t member
+ * @data:     set if data is active
+ */
+
+struct custom_mms {
+       void __iomem *base_addr;
+       int irq;
+       struct device *dev;
+       struct device *parent;
+       struct cdev cdev;
+       dev_t devt;
+	   int data;
+};
+
+/* poll queue */
+static DECLARE_WAIT_QUEUE_HEAD(read_wq);
+
+/* global so it can be destroyed when module is removed */
+static struct class* custom_mms_class;
+
+
+/**
+* Char. device functions
+*/
+static int custom_mmsdev_open(struct inode *inode, struct file *filp) {
+       struct custom_mms *mmsdev;
+
+       /* store mmsdev pointer for read */
+       mmsdev = container_of(inode->i_cdev, struct custom_mms, cdev);
+       filp->private_data = mmsdev;
+
+       return 0;
+}
+
+static int custom_mmsdev_release(struct inode *inode, struct file *filp) {
+       return 0;
+}
+
+static ssize_t custom_mmsdev_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos) {
+	struct custom_mms *mmsdev;
+	/* buffer */
+	static char buffer[10];
+	/* Number of bytes written to the buffer */
+	ssize_t bytes_read = 0;
+	/* data storage */
+	int data_reg;
+
+	if (*f_pos) {
+		*f_pos = 0;
+		return 0;
+	}
+
+	mmsdev = filp->private_data;
+
+	/* read data from DATA register */
+	data_reg = ioread32(mmsdev->base_addr + CUSTOM_MMS_DATA_OFFSET);
+
+	/* pack it into buffer */
+	sprintf(buffer, "%d\n", data_reg);
+	bytes_read = strlen(buffer);
+
+	/* copy_to_user */
+	if (copy_to_user(buf, buffer, bytes_read)) {
+		return -EFAULT;
+	}
+	*f_pos += bytes_read; 
+
+	/* return number of bytes read */
+	return bytes_read;
+}
+
+static ssize_t custom_mmsdev_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos) {
+	pr_alert("not implemented\n");
+	return -EINVAL;
+}
+
+
+static __poll_t custom_mmsdev_poll(struct file *filp, poll_table *wait) {
+       struct custom_mms *mmsdev;
+       __poll_t retval_mask = 0;
+
+       mmsdev = filp->private_data;
+
+       poll_wait(filp, &read_wq, wait);
+
+       if (mmsdev->data) {
+               //retval_mask =POLLIN|POLLRDNORM
+			   retval_mask = POLLPRI;
+               mmsdev->data = 0;
+       } else {
+               retval_mask = 0;
+       }
+
+       return retval_mask;
+}
+
+static struct file_operations custom_mmsdev_fops = {
+		.owner = THIS_MODULE,
+		.open = custom_mmsdev_open,
+		.release = custom_mmsdev_release,
+		.read = custom_mmsdev_read,
+		.write = custom_mmsdev_write,
+		.poll = custom_mmsdev_poll,
+	};
+
+/** 
+* SYSFS attributes
+*/
+/* Enable */
+static ssize_t enable_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct custom_mms *mmsdev = dev_get_drvdata(child);
+
+	u32 enable = ioread32(mmsdev->base_addr + CUSTOM_MMS_CTRL_OFFSET);
+	enable &= CTRL_EN_MASK;
+	
+	return sprintf(buf, "%d\n", !!enable);
+}
+
+static ssize_t enable_store(struct device *child, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct custom_mms *mmsdev = dev_get_drvdata(child);
+	u32 ctrl = ioread32(mmsdev->base_addr + CUSTOM_MMS_CTRL_OFFSET);
+
+	int enable;
+	sscanf(buf, "%d", &enable);
+
+	if (!enable) {
+		ctrl &= ~CTRL_EN_MASK;
+	} else {
+		ctrl |= CTRL_EN_MASK;
+	}
+
+	iowrite32(ctrl, mmsdev->base_addr + CUSTOM_MMS_CTRL_OFFSET);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(enable);
+
+/* Enable interrupt */
+static ssize_t enable_interrupt_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct custom_mms *mmsdev = dev_get_drvdata(child);
+
+	u32 enable_interrupt = ioread32(mmsdev->base_addr + CUSTOM_MMS_CTRL_OFFSET);
+	enable_interrupt &= CTRL_IEN_MASK;
+	
+	return sprintf(buf, "%d\n", !!enable_interrupt);
+}
+
+static ssize_t enable_interrupt_store(struct device *child, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct custom_mms *mmsdev = dev_get_drvdata(child);
+	u32 ctrl = ioread32(mmsdev->base_addr + CUSTOM_MMS_CTRL_OFFSET);
+
+	int enable_interrupt;
+	sscanf(buf, "%d", &enable_interrupt);
+
+	if (!enable_interrupt) {
+		ctrl &= ~CTRL_IEN_MASK;
+	} else {
+		ctrl |= CTRL_IEN_MASK;
+	}
+
+	iowrite32(ctrl, mmsdev->base_addr + CUSTOM_MMS_CTRL_OFFSET);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(enable_interrupt);
+
+
+/* Read data */
+static ssize_t data_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct custom_mms *mmsdev = dev_get_drvdata(child);
+    
+	u32 data = ioread32(mmsdev->base_addr + CUSTOM_MMS_DATA_OFFSET);
+	data &= DATA_SAMPLE_MASK;
+
+	return sprintf(buf, "%d\n", data);
+}
+
+static DEVICE_ATTR_RO(data);
+
+static struct attribute *custom_mms_attrs[] = {
+	&dev_attr_enable.attr,
+	&dev_attr_enable_interrupt.attr,
+	&dev_attr_data.attr,
+	NULL,
+};
+
+ATTRIBUTE_GROUPS(custom_mms);
+
+/**
+* Initialization
+*/
+static irqreturn_t custom_mms_isr(int irq, void *data)
+{
+	struct custom_mms *mmsdev = data;
+	
+	/* Polling helpers */
+	sysfs_notify(&mmsdev->dev->kobj, NULL, "data");
+	wake_up_interruptible(&read_wq);
+	mmsdev->data = 1;
+
+	iowrite32(0, mmsdev->base_addr + CUSTOM_MMS_STATUS_OFFSET);
+	
+	return IRQ_HANDLED;
+}
+
+static const struct of_device_id custom_mms_of_match[] = {
+{ .compatible = "customdb,mms", },
+{ /* end of table */ }
+};
+
+
+MODULE_DEVICE_TABLE(of, custom_mms_of_match);
+
+static int custom_mmsdev_setup(struct device *parent)
+{
+	int ret;
+	dev_t devt;
+	struct custom_mms *mmsdev;
+
+	mmsdev = dev_get_drvdata(parent);
+
+	ret = alloc_chrdev_region(&devt, 0, 1, DEVICE_FILE_NAME);
+	if (ret < 0) {
+		dev_err(parent, "failed to alloc chrdev region\n");
+		goto fail_alloc_chrdev_region;
+	}
+	mmsdev->devt = devt;
+
+	cdev_init(&mmsdev->cdev, &custom_mmsdev_fops);
+	ret = cdev_add(&mmsdev->cdev, devt, 1);
+	if (ret < 0) {
+		dev_err(parent, "failed to add cdev\n");
+		goto fail_add_cdev;
+	}
+
+	custom_mms_class = class_create(THIS_MODULE, "custom_mms");
+	if (!custom_mms_class) {
+		ret = -EEXIST;
+		dev_err(parent, "failed to create class\n");
+		goto fail_create_class;
+	}
+
+	mmsdev->dev = device_create_with_groups(custom_mms_class, parent, devt, mmsdev,custom_mms_groups, "%s%d", DEVICE_FILE_NAME, MINOR(devt));
+	if (IS_ERR(mmsdev->dev)) {
+		mmsdev->dev = NULL;
+		ret = -EINVAL;
+		dev_err(parent, "failed to create device\n");
+		goto fail_create_device;
+	}
+	return 0;
+	
+	printk("custom_mmsdev_setup called\n");
+
+	fail_create_device:
+		class_destroy(custom_mms_class);
+	fail_create_class:
+		cdev_del(&mmsdev->cdev);
+	fail_add_cdev:
+		unregister_chrdev_region(devt, 1);
+	fail_alloc_chrdev_region:
+		return ret;
+}
+
+static int custom_mms_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct custom_mms *mmsdev;
+	struct resource *res;
+	const struct of_device_id *match;
+
+	mmsdev = devm_kzalloc(&pdev->dev, sizeof(*mmsdev), GFP_KERNEL);
+	if (!mmsdev)
+		return -ENOMEM;
+
+	mmsdev->parent = &pdev->dev;
+
+	match = of_match_node(custom_mms_of_match, pdev->dev.of_node);
+	if (!match) {
+		dev_err(&pdev->dev, "of_match_node() failed\n");
+		return -EINVAL;
+	}
+
+	platform_set_drvdata(pdev, mmsdev);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	mmsdev->base_addr = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(mmsdev->base_addr))
+		return PTR_ERR(mmsdev->base_addr);
+
+	mmsdev->irq = platform_get_irq(pdev, 0);
+	if (mmsdev->irq < 0) {
+		dev_err(&pdev->dev, "invalid IRQ\n");
+		return mmsdev->irq;
+	}
+	ret = devm_request_irq(&pdev->dev, mmsdev->irq, custom_mms_isr, 0, dev_name(&pdev->dev), mmsdev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "unable to request IRQ\n");
+		return ret;
+	}
+
+	/* initialize device */
+	ret = custom_mmsdev_setup(&pdev->dev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "failed to create device\n");
+		return ret;
+	}
+	
+	printk("custom_mms_probe called\n");
+
+	return 0;
+}
+
+static int custom_mms_remove(struct platform_device *pdev)
+{
+	struct custom_mms *mmsdev;
+
+	mmsdev = dev_get_drvdata(&pdev->dev);
+
+	device_destroy(custom_mms_class, mmsdev->devt);
+	class_destroy(custom_mms_class);
+	cdev_del(&mmsdev->cdev);
+	unregister_chrdev_region(mmsdev->devt, 1);
+	
+	printk("custom_mms_remove called\n");
+	
+	return 0;
+}
+
+static struct platform_driver custom_mms_driver = {
+	.driver = {
+		.name = DRIVER_NAME,
+		.of_match_table = custom_mms_of_match,
+	},
+	.probe = custom_mms_probe,
+	.remove = custom_mms_remove,
+};
+
+
+static int __init custom_mms_init(void)
+{
+	pr_alert("Initialization of custom_mms\n");
+	return platform_driver_register(&custom_mms_driver);
+}
+
+
+static void __exit custom_mms_exit(void)
+{
+	pr_alert("Goodbye, world!\n");
+	return platform_driver_unregister(&custom_mms_driver);
+}
+
+module_init(custom_mms_init);
+module_exit(custom_mms_exit);
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Custom Sensor Driver and Device");
+MODULE_AUTHOR("Dragan Bozinovic 3133/2019");
-- 
2.25.1

